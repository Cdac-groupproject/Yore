package com.project.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.project.dto.bidder.BidderRegisterResDTO;
import com.project.dto.bidder.BidderLogReqDTO;
import com.project.dto.bidder.BidderLogResDTO;
import com.project.dto.bidder.BidderRegisterResDTO;
import com.project.dto.bidder.BidderRequestDTO;
import com.project.service.bidder.BidderService;

import jakarta.validation.Valid;


@RestController
public class BidderController {

	@Autowired
	private BidderService bidderService;

	@PostMapping("/signin")
	public ResponseEntity<?> signIn(@Valid @RequestBody BidderLogReqDTO dto){
		BidderLogResDTO response = bidderService.logIn(dto);
		return ResponseEntity.ok(response);
	}

//	@PostMapping("/signup")
//	public ResponseEntity<?> signUp(@Valid @RequestBody BidderRequestDTO dto) {
//		BidderRegisterResDTO response = bidderService.register(dto);
//		return ResponseEntity.status(HttpStatus.CREATED).body(response);
//	}	 
	
//	After verify user
//	After otp verification
	@PostMapping("/sign-up")
	public ResponseEntity<?> signUp(@RequestBody BidderRequestDTO dto){
		String msg = bidderService.signUp(dto);
		return ResponseEntity.ok(msg);
	}
	
	@PostMapping("/verify-user")
	public ResponseEntity<?> verifyUser(@RequestParam String email, @RequestParam String otp){
		BidderRegisterResDTO dto = bidderService.verifyUser(email, otp);
		return ResponseEntity.ok(dto);
	}
	
	@GetMapping("users")
	public ResponseEntity<?> getAllUsers(){
		List<BidderLogResDTO> users = bidderService.getAllUsers();
		if(users == null)
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		
		return ResponseEntity.ok(users);
	}
}
