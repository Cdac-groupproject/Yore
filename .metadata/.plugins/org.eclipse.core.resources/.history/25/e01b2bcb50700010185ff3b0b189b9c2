package com.project.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
//@EnableWebSecurity
public class SecurityConfig {
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	SecurityFilterChain configureFilterChain(HttpSecurity http) throws Exception {
		
		http.csrf(csrf -> csrf.disable());
		
		http.authorizeHttpRequests(

				request -> request
				.requestMatchers("/swagger-ui/**",
						"/v3/api-docs/**", "/users/signin", "/users/signup")
						.permitAll()
				.requestMatchers(HttpMethod.GET, "/restaurants")
				.permitAll()
				.requestMatchers(HttpMethod.POST, "/restaurants")
				.hasRole("ADMIN")
				.anyRequest()
					.authenticated());
		// 3. disable HttpSession tracking - stateless
		http.sessionManagement(session -> 
		session.sessionCreationPolicy
		(SessionCreationPolicy.STATELESS));
		// 4. To support REST APIs , disable form login
		http.formLogin(form -> form.disable());
		// 5. Enable Basic auth support - with default.
		http.httpBasic(Customizer.withDefaults());
		return http.build();
	}
    
}
