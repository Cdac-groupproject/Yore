package com.project.service.product;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.project.custom_exception.ApiException;
import com.project.custom_exception.ResourceNotFoundException;
import com.project.dao.CountryRefDao;
import com.project.dao.ProductCategoryDao;
import com.project.dao.ProductDao;
import com.project.dto.ProductDTO;
import com.project.entity.CountryRef;
import com.project.entity.Product;
import com.project.entity.ProductCategory;
import com.project.entity.ProductImage;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class ProductServiceImpl implements ProductService {

    @Autowired
    private ProductDao productDao;

    @Autowired
    private ProductCategoryDao categoryDao;

    @Autowired
    private CountryRefDao countryDao;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public ProductDTO addProduct(ProductDTO productDTO) {
        Product product = new Product();
        product.setName(productDTO.getName());
        product.setDescription(productDTO.getDescription());
        product.setPrice(productDTO.getPrice());
        product.setSold(productDTO.getSold());
        product.setYearMade(productDTO.getYearMade());

        ProductCategory category = categoryDao.findById(Long.valueOf(productDTO.getCategoryId()))
                .orElseThrow(() -> new ApiException("Invalid Category ID"));
        CountryRef country = countryDao.findById(productDTO.getCountryOfOriginId())
                .orElseThrow(() -> new ApiException("Invalid Country ID"));

        product.setCategory(category);
        product.setCountryOfOrigin(country);

        List<ProductImage> images = productDTO.getImageUrl().stream()
                .map(url -> {
                    ProductImage img = new ProductImage();
                    img.setImgUrl(url);
                    img.setProduct(product);
                    return img;
                })
                .collect(Collectors.toList());

        product.setImageList(images);
        Product saved = productDao.save(product);

        ProductDTO dto = new ProductDTO();
        dto.setProductId(saved.getProductId());
        dto.setName(saved.getName());
        dto.setDescription(saved.getDescription());
        dto.setPrice(saved.getPrice());
        dto.setSold(saved.getSold());
        dto.setCategoryId(saved.getCategory().getCategoryId().toString());
        dto.setCountryOfOriginId(saved.getCountryOfOrigin().getCountryId());
        dto.setYearMade(saved.getYearMade());
        dto.setImageUrl(saved.getImageList().stream()
                .map(ProductImage::getImgUrl)
                .collect(Collectors.toList()));

        return dto;
    }

    @Override
    public ProductDTO getProductById(Long id) {
        Product product = productDao.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Product not found with ID: " + id));

        ProductDTO dto = modelMapper.map(product, ProductDTO.class);
        dto.setPrice(product.getPrice());
        dto.setCategoryId(product.getCategory().getCategoryId().toString());
        dto.setCountryOfOriginId(product.getCountryOfOrigin().getCountryId());
        dto.setImageUrl(product.getImageList().stream()
                .map(ProductImage::getImgUrl)
                .collect(Collectors.toList()));
        return dto;
    }

    @Override
    public List<ProductDTO> getAllProducts() {
        return productDao.findAll().stream()
                .map(p -> {
                    ProductDTO dto = modelMapper.map(p, ProductDTO.class);
                    dto.setPrice(p.getPrice());
                    dto.setCategoryId(p.getCategory().getCategoryId().toString());
                    dto.setCountryOfOriginId(p.getCountryOfOrigin().getCountryId());
                    dto.setImageUrl(p.getImageList().stream()
                            .map(ProductImage::getImgUrl)
                            .collect(Collectors.toList()));
                    return dto;
                })
                .collect(Collectors.toList());
    }

    @Override
    public ProductDTO updateProduct(Long productId, ProductDTO productDTO) {
        Product product = productDao.findById(productId)
                .orElseThrow(() -> new ResourceNotFoundException("Product not found with ID: " + productId));

        product.setName(productDTO.getName());
        product.setDescription(productDTO.getDescription());
        product.setPrice(productDTO.getPrice());
        product.setSold(productDTO.getSold());
        product.setYearMade(productDTO.getYearMade());

        ProductCategory category = categoryDao.findById(Long.valueOf(productDTO.getCategoryId()))
                .orElseThrow(() -> new ApiException("Invalid Category ID"));
        CountryRef country = countryDao.findById(productDTO.getCountryOfOriginId())
                .orElseThrow(() -> new ApiException("Invalid Country ID"));

        product.setCategory(category);
        product.setCountryOfOrigin(country);

        List<ProductImage> updatedImages = productDTO.getImageUrl().stream()
                .map(url -> {
                    ProductImage img = new ProductImage();
                    img.setImgUrl(url);
                    img.setProduct(product);
                    return img;
                })
                .collect(Collectors.toList());
        product.getImageList().clear();
        product.getImageList().addAll(updatedImages);

        Product saved = productDao.save(product);

        ProductDTO dto = modelMapper.map(saved, ProductDTO.class);
        dto.setStartingPrice(saved.getPrice());
        dto.setCategoryId(saved.getCategory().getCategoryId().toString());
        dto.setCountryOfOriginId(saved.getCountryOfOrigin().getCountryId());
        dto.setImageUrl(saved.getImageList().stream()
                .map(ProductImage::getImgUrl)
                .collect(Collectors.toList()));
        return dto;
    }

    @Override
    public void deleteProduct(Long productId) {
        Product product = productDao.findById(productId)
                .orElseThrow(() -> new ResourceNotFoundException("Product not found with ID: " + productId));
        productDao.delete(product);
    }

}
